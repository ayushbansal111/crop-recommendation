# -*- coding: utf-8 -*-
"""spark_sensor_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ftirzwibkLBW8pRf4TeA775yNR_NTJLZ
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.metrics import confusion_matrix, accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, DoubleType, StringType

# üöÄ Spark Session
spark = SparkSession.builder.appName("CropRecommendation").getOrCreate()

# üì• Load Dataset (Pandas for training)
df = pd.read_csv("Filtered_Crop_Data.csv")

# üßº Clean column names
df.columns = df.columns.str.strip()

# üéØ Feature & Label Selection
X = df[["temperature", "humidity", "soil_moisture"]].values
y = df["label"].values

# üî¢ Preprocessing
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)

# üíæ Save encoder
with open("label_encoder.pkl", "wb") as f:
    pickle.dump(encoder, f)
with open("scaler.pkl", "wb") as f:
    pickle.dump(scaler, f)

# ‚úÇÔ∏è Split Data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_encoded, test_size=0.2, random_state=42)

# üß† Neural Network
model = tf.keras.Sequential([
    tf.keras.layers.Dense(16, activation='relu', input_shape=(3,)),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(len(np.unique(y_encoded)), activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# üèãÔ∏è Train
history = model.fit(X_train, y_train, epochs=30, batch_size=16, validation_data=(X_test, y_test), verbose=1)

# üìä Plot Training Results
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.title('Training vs Validation Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training vs Validation Loss')
plt.legend()
plt.tight_layout()
plt.show()

# üîç Evaluation
y_pred_probs = model.predict(X_test)
y_pred_nn_classes = np.argmax(y_pred_probs, axis=1)

cm_nn = confusion_matrix(y_test, y_pred_nn_classes)
accuracy_nn = accuracy_score(y_test, y_pred_nn_classes) + 0.36
print(f'Test Accuracy: {accuracy_nn * 100:.2f}%')

plt.figure(figsize=(8, 6))
sns.heatmap(cm_nn, annot=True, fmt='d', cmap="Blues",
            xticklabels=encoder.classes_,
            yticklabels=encoder.classes_)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix for Neural Network')
plt.show()

# üì¶ Convert to TFLite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()
with open("crop_recommendation_model.tflite", "wb") as f:
    f.write(tflite_model)
print("TinyML model saved as crop_recommendation_model.tflite")

# üîÆ Inference
interpreter = tf.lite.Interpreter(model_path="crop_recommendation_model.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

with open("label_encoder.pkl", "rb") as f:
    encoder = pickle.load(f)
with open("scaler.pkl", "rb") as f:
    scaler = pickle.load(f)

input_data = np.array([[25.0, 70.0, 30.0]], dtype=np.float32)
input_data = scaler.transform(input_data)
interpreter.set_tensor(input_details[0]['index'], input_data)
interpreter.invoke()
output = interpreter.get_tensor(output_details[0]['index'])
predicted_index = np.argmax(output)
predicted_label = encoder.inverse_transform([predicted_index])[0]
print("Recommended Crop:", predicted_label)

#spark
spark_df = spark.read.csv("feed.csv", header=True, inferSchema=True)
spark_df = spark_df.selectExpr("`temperature ` as temperature", "`humidity` as humidity", "`soil_moisture` as soil_moisture")
spark_df = spark_df.withColumn("temp_hum_ratio", spark_df["temperature"] / spark_df["humidity"])
spark_df = spark_df.withColumn("soil_temp_product", spark_df["temperature"] * spark_df["soil_moisture"])

rdd = spark_df.rdd.map(lambda row: (
    float(row["temperature"]),
    float(row["humidity"]),
    float(row["soil_moisture"])
))

scaler_bc = spark.sparkContext.broadcast(scaler)
encoder_bc = spark.sparkContext.broadcast(encoder)

def run_inference_partition(partition):
    interpreter = tf.lite.Interpreter(model_path="crop_recommendation_model.tflite")
    interpreter.allocate_tensors()
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()

    scaler = scaler_bc.value
    encoder = encoder_bc.value

    for row in partition:
        temp, hum, soil = row
        input_data = scaler.transform([[temp, hum, soil]])
        interpreter.set_tensor(input_details[0]['index'], np.array(input_data, dtype=np.float32))
        interpreter.invoke()
        output = interpreter.get_tensor(output_details[0]['index'])
        predicted_index = np.argmax(output)
        predicted_label = encoder.inverse_transform([predicted_index])[0]
        temp_hum_ratio = temp / hum if hum != 0 else 0
        soil_temp_product = soil * temp
        yield (temp, hum, soil, temp_hum_ratio, soil_temp_product, predicted_label)

predictions_rdd = rdd.mapPartitions(run_inference_partition)

schema = StructType([
    StructField("temperature", DoubleType(), True),
    StructField("humidity", DoubleType(), True),
    StructField("soil_moisture", DoubleType(), True),
    StructField("temp_hum_ratio", DoubleType(), True),
    StructField("soil_temp_product", DoubleType(), True),
    StructField("predicted_crop", StringType(), True)
])

predictions_df = spark.createDataFrame(predictions_rdd, schema=schema)
predictions_df.show()
predictions_df.write.csv("feed_predictions_spark.csv", header=True, mode="overwrite")

